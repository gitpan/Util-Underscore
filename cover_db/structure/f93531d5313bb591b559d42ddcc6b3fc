{"file":"lib/Util/Underscore.pm","statement":[5,5,5,6,6,6,7,7,7,9,9,9,11,11,11,12,12,12,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17,18,18,18,19,19,19,24,24,22,60,61,73,71,78,78,78,160,161,163,164,165,168,194,195,198,202,203,206,210,211,214,218,219,222,226,227,230,234,235,238,242,243,246,301,305,309,313,317,320,324,327,331,334,338,341,345,348,352,355,467,521,525,529,533,563,564],"subroutine":[[5,"BEGIN"],[6,"BEGIN"],[7,"BEGIN"],[9,"BEGIN"],[11,"BEGIN"],[12,"BEGIN"],[13,"BEGIN"],[14,"BEGIN"],[15,"BEGIN"],[16,"BEGIN"],[17,"BEGIN"],[18,"BEGIN"],[19,"BEGIN"],[24,"BEGIN"],[60,"BEGIN"],[73,"BEGIN"],[78,"BEGIN"],[71,"__ANON__"],[160,"prototype"],[194,"is_ref"],[202,"is_scalar_ref"],[210,"is_array_ref"],[218,"is_hash_ref"],[226,"is_code_ref"],[234,"is_glob_ref"],[242,"is_regex"],[301,"is_int"],[309,"is_uint"],[317,"is_plain"],[324,"is_identifier"],[331,"is_package"],[338,"class_isa"],[345,"class_does"],[352,"is_instance"],[467,"zip"],[521,"isa"],[525,"does"],[529,"can"],[533,"safecall"],[563,"package"]],"branch":[[60,{"text":"if (keys %main::_::)"}],[161,{"text":"if @_ == 2"}],[160,{"text":"if (@_ == 2)"}],[163,{"text":"if (@_ == 1) { }"}],[194,{"text":"unless defined $_[0]"}],[195,{"text":"if defined &Scalar::Util::reftype($_[0]) and not defined &Scalar::Util::blessed($_[0])"}],[202,{"text":"unless defined $_[0]"}],[203,{"text":"if 'SCALAR' eq ref $_[0] or overload::Method($_[0], '${}')"}],[210,{"text":"unless defined $_[0]"}],[211,{"text":"if 'ARRAY' eq ref $_[0] or overload::Method($_[0], '@{}')"}],[218,{"text":"unless defined $_[0]"}],[219,{"text":"if 'HASH' eq ref $_[0] or overload::Method($_[0], '%{}')"}],[226,{"text":"unless defined $_[0]"}],[227,{"text":"if 'CODE' eq ref $_[0] or overload::Method($_[0], '&{}')"}],[234,{"text":"unless defined $_[0]"}],[235,{"text":"if 'GLOB' eq ref $_[0] or overload::Method($_[0], '*{}')"}],[242,{"text":"unless defined &Scalar::Util::blessed($_[0])"}],[243,{"text":"if 'Regexp' eq ref $_[0] or overload::Method($_[0], 'qr')"}],[301,{"text":"if defined $_[0] and not defined &Scalar::Util::reftype($_[0]) and $_[0] =~ /\\A [-]? [0-9]+ \\z/x"}],[309,{"text":"if defined $_[0] and not defined &Scalar::Util::reftype($_[0]) and $_[0] =~ /\\A [0-9]+ \\z/x"}],[317,{"text":"if defined $_[0] and not defined &Scalar::Util::reftype($_[0])"}],[324,{"text":"if defined $_[0] and $_[0] =~ /\\A [^\\W\\d]\\w* \\z/x"}],[331,{"text":"if defined $_[0] and $_[0] =~ /\\A [^\\W\\d]\\w* (?: [:][:]\\w+ )* \\z/x"}],[338,{"text":"if &_::is_package($_[0]) and $_[0]->isa($_[1])"}],[345,{"text":"if &_::is_package($_[0]) and $_[0]->DOES($_[1])"}],[352,{"text":"if &Scalar::Util::blessed($_[0]) and $_[0]->DOES($_[1])"}]],"digest":"f93531d5313bb591b559d42ddcc6b3fc","start":{"7":{"BEGIN":[{"time":null,"branch":null,"subroutine":2,"pod":null,"condition":null,"statement":6}]},"317":{"is_plain":[{"branch":20,"subroutine":28,"time":null,"statement":80,"pod":10,"condition":11}]},"338":{"class_isa":[{"subroutine":31,"branch":23,"time":null,"condition":14,"pod":13,"statement":86}]},"301":{"is_int":[{"pod":8,"statement":76,"condition":7,"branch":18,"subroutine":26,"time":null}]},"6":{"BEGIN":[{"pod":null,"statement":3,"condition":null,"time":null,"subroutine":1,"branch":null}]},"24":{"BEGIN":[{"subroutine":13,"branch":null,"time":null,"condition":null,"pod":null,"statement":39}]},"563":{"package":[{"condition":17,"pod":21,"statement":97,"branch":26,"subroutine":39,"time":null}]},"12":{"BEGIN":[{"time":null,"subroutine":5,"branch":null,"statement":15,"pod":null,"condition":null}]},"73":{"BEGIN":[{"subroutine":15,"branch":1,"time":null,"condition":null,"pod":null,"statement":44}]},"194":{"is_ref":[{"pod":1,"statement":55,"condition":null,"subroutine":19,"branch":4,"time":null}]},"234":{"is_glob_ref":[{"branch":14,"subroutine":24,"time":null,"statement":70,"pod":6,"condition":5}]},"17":{"BEGIN":[{"statement":30,"condition":null,"pod":null,"time":null,"subroutine":10,"branch":null}]},"210":{"is_array_ref":[{"branch":8,"subroutine":21,"time":null,"condition":2,"pod":3,"statement":61}]},"242":{"is_regex":[{"pod":7,"statement":73,"condition":6,"time":null,"branch":16,"subroutine":25}]},"5":{"BEGIN":[{"pod":null,"statement":null,"condition":null,"branch":null,"subroutine":null,"time":null}]},"345":{"class_does":[{"condition":15,"pod":14,"statement":88,"subroutine":32,"branch":24,"time":null}]},"19":{"BEGIN":[{"condition":null,"pod":null,"statement":36,"branch":null,"subroutine":12,"time":null}]},"15":{"BEGIN":[{"time":null,"subroutine":8,"branch":null,"pod":null,"statement":24,"condition":null}]},"331":{"is_package":[{"statement":84,"pod":12,"condition":13,"time":null,"branch":22,"subroutine":30}]},"352":{"is_instance":[{"condition":16,"statement":90,"pod":15,"time":null,"subroutine":33,"branch":25}]},"14":{"BEGIN":[{"statement":21,"condition":null,"pod":null,"subroutine":7,"branch":null,"time":null}]},"16":{"BEGIN":[{"statement":27,"pod":null,"condition":null,"subroutine":9,"branch":null,"time":null}]},"13":{"BEGIN":[{"branch":null,"subroutine":6,"time":null,"statement":18,"pod":null,"condition":null}]},"60":{"BEGIN":[{"subroutine":14,"branch":null,"time":null,"condition":null,"pod":null,"statement":42}]},"529":{"can":[{"pod":19,"condition":17,"statement":95,"time":null,"branch":26,"subroutine":37}]},"226":{"is_code_ref":[{"branch":12,"subroutine":23,"time":null,"pod":5,"condition":4,"statement":67}]},"467":{"zip":[{"condition":17,"pod":16,"statement":92,"branch":26,"subroutine":34,"time":null}]},"-1":{"__COVER__":[{"statement":99,"pod":22,"condition":17,"branch":26,"subroutine":40,"time":null}]},"18":{"BEGIN":[{"statement":33,"condition":null,"pod":null,"time":null,"branch":null,"subroutine":11}]},"160":{"prototype":[{"condition":null,"statement":49,"pod":null,"subroutine":18,"branch":1,"time":null}]},"324":{"is_identifier":[{"condition":12,"pod":11,"statement":82,"time":null,"subroutine":29,"branch":21}]},"533":{"safecall":[{"time":null,"subroutine":38,"branch":26,"condition":17,"pod":20,"statement":96}]},"11":{"BEGIN":[{"branch":null,"subroutine":4,"time":null,"pod":null,"condition":null,"statement":12}]},"9":{"BEGIN":[{"pod":null,"statement":9,"condition":null,"time":null,"subroutine":3,"branch":null}]},"218":{"is_hash_ref":[{"time":null,"subroutine":22,"branch":10,"statement":64,"condition":3,"pod":4}]},"525":{"does":[{"time":null,"subroutine":36,"branch":26,"statement":94,"condition":17,"pod":18}]},"202":{"is_scalar_ref":[{"branch":6,"subroutine":20,"time":null,"statement":58,"condition":1,"pod":2}]},"71":{"__ANON__":[{"time":null,"subroutine":17,"branch":1,"condition":null,"statement":49,"pod":null}]},"521":{"isa":[{"pod":17,"statement":93,"condition":17,"time":null,"branch":26,"subroutine":35}]},"78":{"BEGIN":[{"time":null,"subroutine":16,"branch":1,"statement":46,"condition":null,"pod":null}]},"309":{"is_uint":[{"time":null,"branch":19,"subroutine":27,"condition":9,"pod":9,"statement":78}]}},"pod":[[160,"prototype"],[194,"is_ref"],[202,"is_scalar_ref"],[210,"is_array_ref"],[218,"is_hash_ref"],[226,"is_code_ref"],[234,"is_glob_ref"],[242,"is_regex"],[301,"is_int"],[309,"is_uint"],[317,"is_plain"],[324,"is_identifier"],[331,"is_package"],[338,"class_isa"],[345,"class_does"],[352,"is_instance"],[467,"zip"],[521,"isa"],[525,"does"],[529,"can"],[533,"safecall"],[563,"package"]],"condition":[[195,{"op":"and","type":"and_3","right":"not defined &Scalar::Util::blessed($_[0])","left":"defined &Scalar::Util::reftype($_[0])"}],[203,{"op":"or","type":"or_3","left":"'SCALAR' eq ref $_[0]","right":"overload::Method($_[0], '${}')"}],[211,{"type":"or_3","left":"'ARRAY' eq ref $_[0]","right":"overload::Method($_[0], '@{}')","op":"or"}],[219,{"left":"'HASH' eq ref $_[0]","right":"overload::Method($_[0], '%{}')","type":"or_3","op":"or"}],[227,{"op":"or","left":"'CODE' eq ref $_[0]","right":"overload::Method($_[0], '&{}')","type":"or_3"}],[235,{"op":"or","type":"or_3","left":"'GLOB' eq ref $_[0]","right":"overload::Method($_[0], '*{}')"}],[243,{"type":"or_3","left":"'Regexp' eq ref $_[0]","right":"overload::Method($_[0], 'qr')","op":"or"}],[301,{"left":"defined $_[0]","right":"not defined &Scalar::Util::reftype($_[0])","type":"and_3","op":"and"}],[301,{"op":"and","type":"and_3","right":"$_[0] =~ /\\A [-]? [0-9]+ \\z/x","left":"defined $_[0] and not defined &Scalar::Util::reftype($_[0])"}],[309,{"type":"and_3","right":"not defined &Scalar::Util::reftype($_[0])","left":"defined $_[0]","op":"and"}],[309,{"left":"defined $_[0] and not defined &Scalar::Util::reftype($_[0])","right":"$_[0] =~ /\\A [0-9]+ \\z/x","type":"and_3","op":"and"}],[317,{"right":"not defined &Scalar::Util::reftype($_[0])","left":"defined $_[0]","type":"and_3","op":"and"}],[324,{"op":"and","left":"defined $_[0]","right":"$_[0] =~ /\\A [^\\W\\d]\\w* \\z/x","type":"and_3"}],[331,{"op":"and","left":"defined $_[0]","right":"$_[0] =~ /\\A [^\\W\\d]\\w* (?: [:][:]\\w+ )* \\z/x","type":"and_3"}],[338,{"left":"&_::is_package($_[0])","right":"$_[0]->isa($_[1])","type":"and_3","op":"and"}],[345,{"type":"and_3","left":"&_::is_package($_[0])","right":"$_[0]->DOES($_[1])","op":"and"}],[352,{"type":"and_3","left":"&Scalar::Util::blessed($_[0])","right":"$_[0]->DOES($_[1])","op":"and"}]]}